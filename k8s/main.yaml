apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeploy-sa
  namespace: kubeploy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeploy-role
  namespace: kubeploy
rules:
  - apiGroups: ['']
    resources: ['pods', 'services', 'configmaps', 'secrets']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']
  - apiGroups: ['apps']
    resources: ['deployments']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']
  - apiGroups: ['networking.k8s.io']
    resources: ['ingresses']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']
  - apiGroups: ['cert-manager.io']
    resources: ['issuers']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']
  - apiGroups: ['batch']
    resources: ['jobs', 'jobs/status']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeploy-role-binding
  namespace: kubeploy
subjects:
  - kind: ServiceAccount
    name: kubeploy-sa
    namespace: default
roleRef:
  kind: ClusterRole
  name: kubeploy-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: kubeploy
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeploy
  namespace: kubeploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeploy
  template:
    metadata:
      labels:
        app: kubeploy
    spec:
      serviceAccountName: kubeploy-sa
      containers:
        - name: kubeploy
          image: kubeploy:v25
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: ${POSTGRES_DB}
            - name: POSTGRES_PASSWORD
              value: ${POSTGRES_PASSWORD}
            - name: POSTGRES_USER
              value: ${POSTGRES_USER}
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-data
---
apiVersion: v1
kind: Service
metadata:
  name: kubeploy-service
  namespace: kubeploy
spec:
  selector:
    app: kubeploy
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: local-registry
  namespace: kubeploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-registry
  template:
    metadata:
      labels:
        app: local-registry
    spec:
      containers:
        - name: registry
          image: registry:2
          ports:
            - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: local-registry
  namespace: kubeploy
spec:
  selector:
    app: local-registry
  ports:
    - port: 5000
      targetPort: 5000
